/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.daos;


import com.aa.msw.gen.jooq.tables.SampleTable;
import com.aa.msw.gen.jooq.tables.records.SampleTableRecord;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SampleTableDao extends DAOImpl<SampleTableRecord, com.aa.msw.gen.jooq.tables.pojos.SampleTable, UUID> {

    /**
     * Create a new SampleTableDao without any configuration
     */
    public SampleTableDao() {
        super(SampleTable.SAMPLE_TABLE, com.aa.msw.gen.jooq.tables.pojos.SampleTable.class);
    }

    /**
     * Create a new SampleTableDao with an attached configuration
     */
    public SampleTableDao(Configuration configuration) {
        super(SampleTable.SAMPLE_TABLE, com.aa.msw.gen.jooq.tables.pojos.SampleTable.class, configuration);
    }

    @Override
    public UUID getId(com.aa.msw.gen.jooq.tables.pojos.SampleTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SampleTable.SAMPLE_TABLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchById(UUID... values) {
        return fetch(SampleTable.SAMPLE_TABLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.aa.msw.gen.jooq.tables.pojos.SampleTable fetchOneById(UUID value) {
        return fetchOne(SampleTable.SAMPLE_TABLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchOptionalById(UUID value) {
        return fetchOptional(SampleTable.SAMPLE_TABLE.ID, value);
    }

    /**
     * Fetch records that have <code>timestamp BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchRangeOfTimestamp(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(SampleTable.SAMPLE_TABLE.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchByTimestamp(OffsetDateTime... values) {
        return fetch(SampleTable.SAMPLE_TABLE.TIMESTAMP, values);
    }

    /**
     * Fetch records that have <code>temperature BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchRangeOfTemperature(Float lowerInclusive, Float upperInclusive) {
        return fetchRange(SampleTable.SAMPLE_TABLE.TEMPERATURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>temperature IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchByTemperature(Float... values) {
        return fetch(SampleTable.SAMPLE_TABLE.TEMPERATURE, values);
    }

    /**
     * Fetch records that have <code>flow BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchRangeOfFlow(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SampleTable.SAMPLE_TABLE.FLOW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>flow IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SampleTable> fetchByFlow(Integer... values) {
        return fetch(SampleTable.SAMPLE_TABLE.FLOW, values);
    }
}
