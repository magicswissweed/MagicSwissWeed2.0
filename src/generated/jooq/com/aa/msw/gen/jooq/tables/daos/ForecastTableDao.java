/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.daos;


import com.aa.msw.gen.jooq.tables.ForecastTable;
import com.aa.msw.gen.jooq.tables.records.ForecastTableRecord;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.JSONB;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ForecastTableDao extends DAOImpl<ForecastTableRecord, com.aa.msw.gen.jooq.tables.pojos.ForecastTable, UUID> {

    /**
     * Create a new ForecastTableDao without any configuration
     */
    public ForecastTableDao() {
        super(ForecastTable.FORECAST_TABLE, com.aa.msw.gen.jooq.tables.pojos.ForecastTable.class);
    }

    /**
     * Create a new ForecastTableDao with an attached configuration
     */
    public ForecastTableDao(Configuration configuration) {
        super(ForecastTable.FORECAST_TABLE, com.aa.msw.gen.jooq.tables.pojos.ForecastTable.class, configuration);
    }

    @Override
    public UUID getId(com.aa.msw.gen.jooq.tables.pojos.ForecastTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchById(UUID... values) {
        return fetch(ForecastTable.FORECAST_TABLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.aa.msw.gen.jooq.tables.pojos.ForecastTable fetchOneById(UUID value) {
        return fetchOne(ForecastTable.FORECAST_TABLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchOptionalById(UUID value) {
        return fetchOptional(ForecastTable.FORECAST_TABLE.ID, value);
    }

    /**
     * Fetch records that have <code>stationid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfStationid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.STATIONID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stationid IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByStationid(Integer... values) {
        return fetch(ForecastTable.FORECAST_TABLE.STATIONID, values);
    }

    /**
     * Fetch records that have <code>measureddata BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfMeasureddata(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.MEASUREDDATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>measureddata IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByMeasureddata(JSONB... values) {
        return fetch(ForecastTable.FORECAST_TABLE.MEASUREDDATA, values);
    }

    /**
     * Fetch records that have <code>median BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfMedian(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.MEDIAN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>median IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByMedian(JSONB... values) {
        return fetch(ForecastTable.FORECAST_TABLE.MEDIAN, values);
    }

    /**
     * Fetch records that have <code>twentyfivetoseventyfivepercentile BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfTwentyfivetoseventyfivepercentile(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.TWENTYFIVETOSEVENTYFIVEPERCENTILE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>twentyfivetoseventyfivepercentile IN
     * (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByTwentyfivetoseventyfivepercentile(JSONB... values) {
        return fetch(ForecastTable.FORECAST_TABLE.TWENTYFIVETOSEVENTYFIVEPERCENTILE, values);
    }

    /**
     * Fetch records that have <code>max BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfMax(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.MAX, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByMax(JSONB... values) {
        return fetch(ForecastTable.FORECAST_TABLE.MAX, values);
    }

    /**
     * Fetch records that have <code>min BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfMin(JSONB lowerInclusive, JSONB upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.MIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>min IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByMin(JSONB... values) {
        return fetch(ForecastTable.FORECAST_TABLE.MIN, values);
    }

    /**
     * Fetch records that have <code>timestamp BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchRangeOfTimestamp(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(ForecastTable.FORECAST_TABLE.TIMESTAMP, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>timestamp IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.ForecastTable> fetchByTimestamp(OffsetDateTime... values) {
        return fetch(ForecastTable.FORECAST_TABLE.TIMESTAMP, values);
    }
}
