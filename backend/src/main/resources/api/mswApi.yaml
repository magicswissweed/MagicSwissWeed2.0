openapi: 3.0.3
info:
  title: Msw Api
  description: Msw Api
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/'
paths:
  /sample/current/{stationId}:
    get:
      summary: Get current Flow and Temperature of a specific Station
      security:
        - bearerAuth: [ ]
      operationId: getCurrentSample
      parameters:
        - name: stationId
          description: The id of the station to get the sample from.
          in: path
          schema:
            type: integer
          required: true
      tags:
        - sample
      responses:
        '200':
          description: Returns the last measured Sample from the station.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSample'
  /sample/last40Days/{stationId}:
    get:
      summary: Get Samples from last 40 Days for this station.
      security:
        - bearerAuth: [ ]
      operationId: getLast40DaysSamples
      parameters:
        - name: stationId
          description: The id of the station to get the sample from.
          in: path
          schema:
            type: integer
          required: true
      tags:
        - sample
      responses:
        '200':
          description: Returns the Samples from the last 40 Days for the station.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLast40DaysSamples'
  /forecast/{stationId}:
    get:
      summary: Get Forecast for specific Station
      security:
        - bearerAuth: [ ]
      operationId: getForecast
      parameters:
        - name: stationId
          description: The id of the station to get the sample from.
          in: path
          schema:
            type: integer
          required: true
      tags:
        - forecast
      responses:
        '200':
          description: Returns the forecast for the station.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiForecast'
  /spots/public:
    get:
      summary: Get SpotInformation-List including Current Sample and Forecast for non-logged-in user.
      operationId: getPublicSpots
      tags:
        - spots
      responses:
        '200':
          description: Returns a List with Data for the Spots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpotInformationList'
  /spots/all:
    get:
      summary: Get Public and Private SpotInformation-List including Current Sample and Forecast for logged in user.
      security:
        - bearerAuth: [ ]
      operationId: getAllSpots
      tags:
        - spots
      responses:
        '200':
          description: Returns a List with Data for the Spots.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSpotInformationList'
  /spots/add:
    post:
      summary: Add a new private Spot.
      security:
        - bearerAuth: [ ]
      operationId: addPrivateSpot
      tags:
        - spots
      requestBody:
        description: Add a new private Spot.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSpot'
      responses:
        '200':
          description: Added private Spot successfully.
  /spots/delete/{spotId}:
    delete:
      summary: Remove a private Spot.
      security:
        - bearerAuth: [ ]
      operationId: deletePrivateSpot
      parameters:
        - name: spotId
          description: The id of the spot to delete.
          in: path
          schema:
            type: string
            format: uuid
          required: true
      tags:
        - spots
      responses:
        '200':
          description: Removed private Spot successfully.
  /user/register:
    post:
      summary: Register new User.
      operationId: registerUser
      tags:
        - user
      responses:
        '200':
          description: Registration was successful.

components:
  schemas:
    ApiSpotInformationList:
      type: object
      properties:
        riverSurfSpots:
          type: array
          items:
            $ref: '#/components/schemas/ApiSpotInformation'
        bungeeSurfSpots:
          type: array
          items:
            $ref: '#/components/schemas/ApiSpotInformation'
    ApiSpot:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        stationId:
          type: integer
        spotType:
          type: string
          enum:
            - RIVER_SURF
            - BUNGEE_SURF
        isPublic:
          type: boolean
        minFlow:
          type: integer
        maxFlow:
          type: integer
    ApiSpotInformation:
      allOf:
        - $ref: '#/components/schemas/ApiSpot'
        - type: object
          properties:
            currentSample:
              $ref: '#/components/schemas/ApiSample'
            forecast:
              $ref: '#/components/schemas/ApiForecast'
    ApiSample:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        temperature:
          type: number
          format: double
        flow:
          type: integer
    ApiLast40DaysSamples:
      type: array
      items:
        $ref: '#/components/schemas/ApiSample'
    ApiForecast:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        measuredData:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
        median:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
        twentyFivePercentile:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
        seventyFivePercentile:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
        max:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
        min:
          type: array
          items:
            $ref: '#/components/schemas/ApiForecastLineEntry'
    ApiForecastLineEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        flow:
          type: number
          format: double
