/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables;


import com.aa.msw.gen.jooq.Keys;
import com.aa.msw.gen.jooq.Public;
import com.aa.msw.gen.jooq.tables.records.HistoricalYearsDataTableRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HistoricalYearsDataTable extends TableImpl<HistoricalYearsDataTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.historical_years_data_table</code>
     */
    public static final HistoricalYearsDataTable HISTORICAL_YEARS_DATA_TABLE = new HistoricalYearsDataTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HistoricalYearsDataTableRecord> getRecordType() {
        return HistoricalYearsDataTableRecord.class;
    }

    /**
     * The column <code>public.historical_years_data_table.db_id</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, UUID> DB_ID = createField(DSL.name("db_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.historical_years_data_table.station_id</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, Integer> STATION_ID = createField(DSL.name("station_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.historical_years_data_table.median</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> MEDIAN = createField(DSL.name("median"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column
     * <code>public.historical_years_data_table.twenty_five_percentile</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> TWENTY_FIVE_PERCENTILE = createField(DSL.name("twenty_five_percentile"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column
     * <code>public.historical_years_data_table.seventy_five_percentile</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> SEVENTY_FIVE_PERCENTILE = createField(DSL.name("seventy_five_percentile"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.historical_years_data_table.max</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> MAX = createField(DSL.name("max"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.historical_years_data_table.min</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> MIN = createField(DSL.name("min"), SQLDataType.JSONB.nullable(false), this, "");

    /**
     * The column <code>public.historical_years_data_table.current_year</code>.
     */
    public final TableField<HistoricalYearsDataTableRecord, JSONB> CURRENT_YEAR = createField(DSL.name("current_year"), SQLDataType.JSONB.nullable(false), this, "");

    private HistoricalYearsDataTable(Name alias, Table<HistoricalYearsDataTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private HistoricalYearsDataTable(Name alias, Table<HistoricalYearsDataTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.historical_years_data_table</code> table
     * reference
     */
    public HistoricalYearsDataTable(String alias) {
        this(DSL.name(alias), HISTORICAL_YEARS_DATA_TABLE);
    }

    /**
     * Create an aliased <code>public.historical_years_data_table</code> table
     * reference
     */
    public HistoricalYearsDataTable(Name alias) {
        this(alias, HISTORICAL_YEARS_DATA_TABLE);
    }

    /**
     * Create a <code>public.historical_years_data_table</code> table reference
     */
    public HistoricalYearsDataTable() {
        this(DSL.name("historical_years_data_table"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<HistoricalYearsDataTableRecord> getPrimaryKey() {
        return Keys.HISTORICAL_YEARS_DATA_TABLE_PKEY;
    }

    @Override
    public HistoricalYearsDataTable as(String alias) {
        return new HistoricalYearsDataTable(DSL.name(alias), this);
    }

    @Override
    public HistoricalYearsDataTable as(Name alias) {
        return new HistoricalYearsDataTable(alias, this);
    }

    @Override
    public HistoricalYearsDataTable as(Table<?> alias) {
        return new HistoricalYearsDataTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricalYearsDataTable rename(String name) {
        return new HistoricalYearsDataTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricalYearsDataTable rename(Name name) {
        return new HistoricalYearsDataTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public HistoricalYearsDataTable rename(Table<?> name) {
        return new HistoricalYearsDataTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable where(Condition condition) {
        return new HistoricalYearsDataTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricalYearsDataTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricalYearsDataTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricalYearsDataTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public HistoricalYearsDataTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public HistoricalYearsDataTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
