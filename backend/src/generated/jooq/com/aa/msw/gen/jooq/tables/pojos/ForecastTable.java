/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.JSONB;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ForecastTable implements Serializable {

    private static final long serialVersionUID = 1L;

    private final UUID id;
    private final Integer stationid;
    private final JSONB measureddata;
    private final JSONB median;
    private final JSONB twentyfivetoseventyfivepercentile;
    private final JSONB max;
    private final JSONB min;
    private final OffsetDateTime timestamp;

    public ForecastTable(ForecastTable value) {
        this.id = value.id;
        this.stationid = value.stationid;
        this.measureddata = value.measureddata;
        this.median = value.median;
        this.twentyfivetoseventyfivepercentile = value.twentyfivetoseventyfivepercentile;
        this.max = value.max;
        this.min = value.min;
        this.timestamp = value.timestamp;
    }

    public ForecastTable(
        UUID id,
        Integer stationid,
        JSONB measureddata,
        JSONB median,
        JSONB twentyfivetoseventyfivepercentile,
        JSONB max,
        JSONB min,
        OffsetDateTime timestamp
    ) {
        this.id = id;
        this.stationid = stationid;
        this.measureddata = measureddata;
        this.median = median;
        this.twentyfivetoseventyfivepercentile = twentyfivetoseventyfivepercentile;
        this.max = max;
        this.min = min;
        this.timestamp = timestamp;
    }

    /**
     * Getter for <code>public.forecast_table.id</code>.
     */
    public UUID getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.forecast_table.stationid</code>.
     */
    public Integer getStationid() {
        return this.stationid;
    }

    /**
     * Getter for <code>public.forecast_table.measureddata</code>.
     */
    public JSONB getMeasureddata() {
        return this.measureddata;
    }

    /**
     * Getter for <code>public.forecast_table.median</code>.
     */
    public JSONB getMedian() {
        return this.median;
    }

    /**
     * Getter for
     * <code>public.forecast_table.twentyfivetoseventyfivepercentile</code>.
     */
    public JSONB getTwentyfivetoseventyfivepercentile() {
        return this.twentyfivetoseventyfivepercentile;
    }

    /**
     * Getter for <code>public.forecast_table.max</code>.
     */
    public JSONB getMax() {
        return this.max;
    }

    /**
     * Getter for <code>public.forecast_table.min</code>.
     */
    public JSONB getMin() {
        return this.min;
    }

    /**
     * Getter for <code>public.forecast_table.timestamp</code>.
     */
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final ForecastTable other = (ForecastTable) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.stationid == null) {
            if (other.stationid != null)
                return false;
        }
        else if (!this.stationid.equals(other.stationid))
            return false;
        if (this.measureddata == null) {
            if (other.measureddata != null)
                return false;
        }
        else if (!this.measureddata.equals(other.measureddata))
            return false;
        if (this.median == null) {
            if (other.median != null)
                return false;
        }
        else if (!this.median.equals(other.median))
            return false;
        if (this.twentyfivetoseventyfivepercentile == null) {
            if (other.twentyfivetoseventyfivepercentile != null)
                return false;
        }
        else if (!this.twentyfivetoseventyfivepercentile.equals(other.twentyfivetoseventyfivepercentile))
            return false;
        if (this.max == null) {
            if (other.max != null)
                return false;
        }
        else if (!this.max.equals(other.max))
            return false;
        if (this.min == null) {
            if (other.min != null)
                return false;
        }
        else if (!this.min.equals(other.min))
            return false;
        if (this.timestamp == null) {
            if (other.timestamp != null)
                return false;
        }
        else if (!this.timestamp.equals(other.timestamp))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.stationid == null) ? 0 : this.stationid.hashCode());
        result = prime * result + ((this.measureddata == null) ? 0 : this.measureddata.hashCode());
        result = prime * result + ((this.median == null) ? 0 : this.median.hashCode());
        result = prime * result + ((this.twentyfivetoseventyfivepercentile == null) ? 0 : this.twentyfivetoseventyfivepercentile.hashCode());
        result = prime * result + ((this.max == null) ? 0 : this.max.hashCode());
        result = prime * result + ((this.min == null) ? 0 : this.min.hashCode());
        result = prime * result + ((this.timestamp == null) ? 0 : this.timestamp.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ForecastTable (");

        sb.append(id);
        sb.append(", ").append(stationid);
        sb.append(", ").append(measureddata);
        sb.append(", ").append(median);
        sb.append(", ").append(twentyfivetoseventyfivepercentile);
        sb.append(", ").append(max);
        sb.append(", ").append(min);
        sb.append(", ").append(timestamp);

        sb.append(")");
        return sb.toString();
    }
}
