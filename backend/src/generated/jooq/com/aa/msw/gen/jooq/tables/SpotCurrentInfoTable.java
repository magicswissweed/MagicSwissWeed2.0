/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables;


import com.aa.msw.gen.jooq.Keys;
import com.aa.msw.gen.jooq.Public;
import com.aa.msw.gen.jooq.enums.Flowstatus;
import com.aa.msw.gen.jooq.tables.SpotTable.SpotTablePath;
import com.aa.msw.gen.jooq.tables.records.SpotCurrentInfoTableRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpotCurrentInfoTable extends TableImpl<SpotCurrentInfoTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spot_current_info_table</code>
     */
    public static final SpotCurrentInfoTable SPOT_CURRENT_INFO_TABLE = new SpotCurrentInfoTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpotCurrentInfoTableRecord> getRecordType() {
        return SpotCurrentInfoTableRecord.class;
    }

    /**
     * The column <code>public.spot_current_info_table.id</code>.
     */
    public final TableField<SpotCurrentInfoTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.spot_current_info_table.spot_id</code>.
     */
    public final TableField<SpotCurrentInfoTableRecord, UUID> SPOT_ID = createField(DSL.name("spot_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.spot_current_info_table.currentflowstatus</code>.
     */
    public final TableField<SpotCurrentInfoTableRecord, Flowstatus> CURRENTFLOWSTATUS = createField(DSL.name("currentflowstatus"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Flowstatus.class), this, "");

    private SpotCurrentInfoTable(Name alias, Table<SpotCurrentInfoTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpotCurrentInfoTable(Name alias, Table<SpotCurrentInfoTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.spot_current_info_table</code> table
     * reference
     */
    public SpotCurrentInfoTable(String alias) {
        this(DSL.name(alias), SPOT_CURRENT_INFO_TABLE);
    }

    /**
     * Create an aliased <code>public.spot_current_info_table</code> table
     * reference
     */
    public SpotCurrentInfoTable(Name alias) {
        this(alias, SPOT_CURRENT_INFO_TABLE);
    }

    /**
     * Create a <code>public.spot_current_info_table</code> table reference
     */
    public SpotCurrentInfoTable() {
        this(DSL.name("spot_current_info_table"), null);
    }

    public <O extends Record> SpotCurrentInfoTable(Table<O> path, ForeignKey<O, SpotCurrentInfoTableRecord> childPath, InverseForeignKey<O, SpotCurrentInfoTableRecord> parentPath) {
        super(path, childPath, parentPath, SPOT_CURRENT_INFO_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpotCurrentInfoTablePath extends SpotCurrentInfoTable implements Path<SpotCurrentInfoTableRecord> {
        public <O extends Record> SpotCurrentInfoTablePath(Table<O> path, ForeignKey<O, SpotCurrentInfoTableRecord> childPath, InverseForeignKey<O, SpotCurrentInfoTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpotCurrentInfoTablePath(Name alias, Table<SpotCurrentInfoTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpotCurrentInfoTablePath as(String alias) {
            return new SpotCurrentInfoTablePath(DSL.name(alias), this);
        }

        @Override
        public SpotCurrentInfoTablePath as(Name alias) {
            return new SpotCurrentInfoTablePath(alias, this);
        }

        @Override
        public SpotCurrentInfoTablePath as(Table<?> alias) {
            return new SpotCurrentInfoTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpotCurrentInfoTableRecord> getPrimaryKey() {
        return Keys.SPOT_CURRENT_INFO_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<SpotCurrentInfoTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SPOT_CURRENT_INFO_TABLE__SPOT_CURRENT_INFO_TABLE_SPOT_ID_FKEY);
    }

    private transient SpotTablePath _spotTable;

    /**
     * Get the implicit join path to the <code>public.spot_table</code> table.
     */
    public SpotTablePath spotTable() {
        if (_spotTable == null)
            _spotTable = new SpotTablePath(this, Keys.SPOT_CURRENT_INFO_TABLE__SPOT_CURRENT_INFO_TABLE_SPOT_ID_FKEY, null);

        return _spotTable;
    }

    @Override
    public SpotCurrentInfoTable as(String alias) {
        return new SpotCurrentInfoTable(DSL.name(alias), this);
    }

    @Override
    public SpotCurrentInfoTable as(Name alias) {
        return new SpotCurrentInfoTable(alias, this);
    }

    @Override
    public SpotCurrentInfoTable as(Table<?> alias) {
        return new SpotCurrentInfoTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotCurrentInfoTable rename(String name) {
        return new SpotCurrentInfoTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotCurrentInfoTable rename(Name name) {
        return new SpotCurrentInfoTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotCurrentInfoTable rename(Table<?> name) {
        return new SpotCurrentInfoTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable where(Condition condition) {
        return new SpotCurrentInfoTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotCurrentInfoTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotCurrentInfoTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotCurrentInfoTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotCurrentInfoTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotCurrentInfoTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
