/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.daos;


import com.aa.msw.gen.jooq.tables.StationTable;
import com.aa.msw.gen.jooq.tables.records.StationTableRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class StationTableDao extends DAOImpl<StationTableRecord, com.aa.msw.gen.jooq.tables.pojos.StationTable, UUID> {

    /**
     * Create a new StationTableDao without any configuration
     */
    public StationTableDao() {
        super(StationTable.STATION_TABLE, com.aa.msw.gen.jooq.tables.pojos.StationTable.class);
    }

    /**
     * Create a new StationTableDao with an attached configuration
     */
    public StationTableDao(Configuration configuration) {
        super(StationTable.STATION_TABLE, com.aa.msw.gen.jooq.tables.pojos.StationTable.class, configuration);
    }

    @Override
    public UUID getId(com.aa.msw.gen.jooq.tables.pojos.StationTable object) {
        return object.getDbId();
    }

    /**
     * Fetch records that have <code>db_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchRangeOfDbId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(StationTable.STATION_TABLE.DB_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>db_id IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchByDbId(UUID... values) {
        return fetch(StationTable.STATION_TABLE.DB_ID, values);
    }

    /**
     * Fetch a unique record that has <code>db_id = value</code>
     */
    public com.aa.msw.gen.jooq.tables.pojos.StationTable fetchOneByDbId(UUID value) {
        return fetchOne(StationTable.STATION_TABLE.DB_ID, value);
    }

    /**
     * Fetch a unique record that has <code>db_id = value</code>
     */
    public Optional<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchOptionalByDbId(UUID value) {
        return fetchOptional(StationTable.STATION_TABLE.DB_ID, value);
    }

    /**
     * Fetch records that have <code>stationid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchRangeOfStationid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(StationTable.STATION_TABLE.STATIONID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stationid IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchByStationid(Integer... values) {
        return fetch(StationTable.STATION_TABLE.STATIONID, values);
    }

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchRangeOfLabel(String lowerInclusive, String upperInclusive) {
        return fetchRange(StationTable.STATION_TABLE.LABEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchByLabel(String... values) {
        return fetch(StationTable.STATION_TABLE.LABEL, values);
    }

    /**
     * Fetch records that have <code>latitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchRangeOfLatitude(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(StationTable.STATION_TABLE.LATITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>latitude IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchByLatitude(Double... values) {
        return fetch(StationTable.STATION_TABLE.LATITUDE, values);
    }

    /**
     * Fetch records that have <code>longitude BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchRangeOfLongitude(Double lowerInclusive, Double upperInclusive) {
        return fetchRange(StationTable.STATION_TABLE.LONGITUDE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>longitude IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.StationTable> fetchByLongitude(Double... values) {
        return fetch(StationTable.STATION_TABLE.LONGITUDE, values);
    }
}
