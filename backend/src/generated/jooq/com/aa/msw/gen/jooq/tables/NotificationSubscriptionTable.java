/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables;


import com.aa.msw.gen.jooq.Keys;
import com.aa.msw.gen.jooq.Public;
import com.aa.msw.gen.jooq.tables.UserTable.UserTablePath;
import com.aa.msw.gen.jooq.tables.records.NotificationSubscriptionTableRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class NotificationSubscriptionTable extends TableImpl<NotificationSubscriptionTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.notification_subscription_table</code>
     */
    public static final NotificationSubscriptionTable NOTIFICATION_SUBSCRIPTION_TABLE = new NotificationSubscriptionTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationSubscriptionTableRecord> getRecordType() {
        return NotificationSubscriptionTableRecord.class;
    }

    /**
     * The column <code>public.notification_subscription_table.id</code>.
     */
    public final TableField<NotificationSubscriptionTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.notification_subscription_table.user_id</code>.
     */
    public final TableField<NotificationSubscriptionTableRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column
     * <code>public.notification_subscription_table.subscription_token</code>.
     */
    public final TableField<NotificationSubscriptionTableRecord, String> SUBSCRIPTION_TOKEN = createField(DSL.name("subscription_token"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private NotificationSubscriptionTable(Name alias, Table<NotificationSubscriptionTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private NotificationSubscriptionTable(Name alias, Table<NotificationSubscriptionTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.notification_subscription_table</code>
     * table reference
     */
    public NotificationSubscriptionTable(String alias) {
        this(DSL.name(alias), NOTIFICATION_SUBSCRIPTION_TABLE);
    }

    /**
     * Create an aliased <code>public.notification_subscription_table</code>
     * table reference
     */
    public NotificationSubscriptionTable(Name alias) {
        this(alias, NOTIFICATION_SUBSCRIPTION_TABLE);
    }

    /**
     * Create a <code>public.notification_subscription_table</code> table
     * reference
     */
    public NotificationSubscriptionTable() {
        this(DSL.name("notification_subscription_table"), null);
    }

    public <O extends Record> NotificationSubscriptionTable(Table<O> path, ForeignKey<O, NotificationSubscriptionTableRecord> childPath, InverseForeignKey<O, NotificationSubscriptionTableRecord> parentPath) {
        super(path, childPath, parentPath, NOTIFICATION_SUBSCRIPTION_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class NotificationSubscriptionTablePath extends NotificationSubscriptionTable implements Path<NotificationSubscriptionTableRecord> {
        public <O extends Record> NotificationSubscriptionTablePath(Table<O> path, ForeignKey<O, NotificationSubscriptionTableRecord> childPath, InverseForeignKey<O, NotificationSubscriptionTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private NotificationSubscriptionTablePath(Name alias, Table<NotificationSubscriptionTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public NotificationSubscriptionTablePath as(String alias) {
            return new NotificationSubscriptionTablePath(DSL.name(alias), this);
        }

        @Override
        public NotificationSubscriptionTablePath as(Name alias) {
            return new NotificationSubscriptionTablePath(alias, this);
        }

        @Override
        public NotificationSubscriptionTablePath as(Table<?> alias) {
            return new NotificationSubscriptionTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<NotificationSubscriptionTableRecord> getPrimaryKey() {
        return Keys.NOTIFICATION_SUBSCRIPTION_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<NotificationSubscriptionTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.NOTIFICATION_SUBSCRIPTION_TABLE__NOTIFICATION_SUBSCRIPTION_TABLE_USER_ID_FKEY);
    }

    private transient UserTablePath _userTable;

    /**
     * Get the implicit join path to the <code>public.user_table</code> table.
     */
    public UserTablePath userTable() {
        if (_userTable == null)
            _userTable = new UserTablePath(this, Keys.NOTIFICATION_SUBSCRIPTION_TABLE__NOTIFICATION_SUBSCRIPTION_TABLE_USER_ID_FKEY, null);

        return _userTable;
    }

    @Override
    public NotificationSubscriptionTable as(String alias) {
        return new NotificationSubscriptionTable(DSL.name(alias), this);
    }

    @Override
    public NotificationSubscriptionTable as(Name alias) {
        return new NotificationSubscriptionTable(alias, this);
    }

    @Override
    public NotificationSubscriptionTable as(Table<?> alias) {
        return new NotificationSubscriptionTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSubscriptionTable rename(String name) {
        return new NotificationSubscriptionTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSubscriptionTable rename(Name name) {
        return new NotificationSubscriptionTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public NotificationSubscriptionTable rename(Table<?> name) {
        return new NotificationSubscriptionTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable where(Condition condition) {
        return new NotificationSubscriptionTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSubscriptionTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSubscriptionTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSubscriptionTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public NotificationSubscriptionTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public NotificationSubscriptionTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
