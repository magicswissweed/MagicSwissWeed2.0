/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.daos;


import com.aa.msw.gen.jooq.enums.Spottype;
import com.aa.msw.gen.jooq.tables.SpotTable;
import com.aa.msw.gen.jooq.tables.records.SpotTableRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpotTableDao extends DAOImpl<SpotTableRecord, com.aa.msw.gen.jooq.tables.pojos.SpotTable, UUID> {

    /**
     * Create a new SpotTableDao without any configuration
     */
    public SpotTableDao() {
        super(SpotTable.SPOT_TABLE, com.aa.msw.gen.jooq.tables.pojos.SpotTable.class);
    }

    /**
     * Create a new SpotTableDao with an attached configuration
     */
    public SpotTableDao(Configuration configuration) {
        super(SpotTable.SPOT_TABLE, com.aa.msw.gen.jooq.tables.pojos.SpotTable.class, configuration);
    }

    @Override
    public UUID getId(com.aa.msw.gen.jooq.tables.pojos.SpotTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchById(UUID... values) {
        return fetch(SpotTable.SPOT_TABLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.aa.msw.gen.jooq.tables.pojos.SpotTable fetchOneById(UUID value) {
        return fetchOne(SpotTable.SPOT_TABLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchOptionalById(UUID value) {
        return fetchOptional(SpotTable.SPOT_TABLE.ID, value);
    }

    /**
     * Fetch records that have <code>type BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfType(Spottype lowerInclusive, Spottype upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>type IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByType(Spottype... values) {
        return fetch(SpotTable.SPOT_TABLE.TYPE, values);
    }

    /**
     * Fetch records that have <code>stationid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfStationid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.STATIONID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>stationid IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByStationid(Integer... values) {
        return fetch(SpotTable.SPOT_TABLE.STATIONID, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByName(String... values) {
        return fetch(SpotTable.SPOT_TABLE.NAME, values);
    }

    /**
     * Fetch records that have <code>minflow BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfMinflow(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.MINFLOW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>minflow IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByMinflow(Integer... values) {
        return fetch(SpotTable.SPOT_TABLE.MINFLOW, values);
    }

    /**
     * Fetch records that have <code>maxflow BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfMaxflow(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.MAXFLOW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>maxflow IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByMaxflow(Integer... values) {
        return fetch(SpotTable.SPOT_TABLE.MAXFLOW, values);
    }

    /**
     * Fetch records that have <code>ispublic BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchRangeOfIspublic(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(SpotTable.SPOT_TABLE.ISPUBLIC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ispublic IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.SpotTable> fetchByIspublic(Boolean... values) {
        return fetch(SpotTable.SPOT_TABLE.ISPUBLIC, values);
    }
}
