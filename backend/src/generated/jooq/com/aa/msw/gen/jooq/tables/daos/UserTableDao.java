/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables.daos;


import com.aa.msw.gen.jooq.tables.UserTable;
import com.aa.msw.gen.jooq.tables.records.UserTableRecord;

import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserTableDao extends DAOImpl<UserTableRecord, com.aa.msw.gen.jooq.tables.pojos.UserTable, UUID> {

    /**
     * Create a new UserTableDao without any configuration
     */
    public UserTableDao() {
        super(UserTable.USER_TABLE, com.aa.msw.gen.jooq.tables.pojos.UserTable.class);
    }

    /**
     * Create a new UserTableDao with an attached configuration
     */
    public UserTableDao(Configuration configuration) {
        super(UserTable.USER_TABLE, com.aa.msw.gen.jooq.tables.pojos.UserTable.class, configuration);
    }

    @Override
    public UUID getId(com.aa.msw.gen.jooq.tables.pojos.UserTable object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(UserTable.USER_TABLE.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchById(UUID... values) {
        return fetch(UserTable.USER_TABLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.aa.msw.gen.jooq.tables.pojos.UserTable fetchOneById(UUID value) {
        return fetchOne(UserTable.USER_TABLE.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchOptionalById(UUID value) {
        return fetchOptional(UserTable.USER_TABLE.ID, value);
    }

    /**
     * Fetch records that have <code>extid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchRangeOfExtid(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER_TABLE.EXTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>extid IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchByExtid(String... values) {
        return fetch(UserTable.USER_TABLE.EXTID, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER_TABLE.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchByEmail(String... values) {
        return fetch(UserTable.USER_TABLE.EMAIL, values);
    }

    /**
     * Fetch records that have <code>username BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchRangeOfUsername(String lowerInclusive, String upperInclusive) {
        return fetchRange(UserTable.USER_TABLE.USERNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<com.aa.msw.gen.jooq.tables.pojos.UserTable> fetchByUsername(String... values) {
        return fetch(UserTable.USER_TABLE.USERNAME, values);
    }
}
