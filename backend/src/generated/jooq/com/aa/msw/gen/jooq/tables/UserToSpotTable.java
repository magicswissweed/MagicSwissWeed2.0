/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables;


import com.aa.msw.gen.jooq.Keys;
import com.aa.msw.gen.jooq.Public;
import com.aa.msw.gen.jooq.tables.SpotTable.SpotTablePath;
import com.aa.msw.gen.jooq.tables.UserTable.UserTablePath;
import com.aa.msw.gen.jooq.tables.records.UserToSpotTableRecord;

import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserToSpotTable extends TableImpl<UserToSpotTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_to_spot_table</code>
     */
    public static final UserToSpotTable USER_TO_SPOT_TABLE = new UserToSpotTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserToSpotTableRecord> getRecordType() {
        return UserToSpotTableRecord.class;
    }

    /**
     * The column <code>public.user_to_spot_table.id</code>.
     */
    public final TableField<UserToSpotTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.user_to_spot_table.user_id</code>.
     */
    public final TableField<UserToSpotTableRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_to_spot_table.spot_id</code>.
     */
    public final TableField<UserToSpotTableRecord, UUID> SPOT_ID = createField(DSL.name("spot_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.user_to_spot_table.position</code>.
     */
    public final TableField<UserToSpotTableRecord, Integer> POSITION = createField(DSL.name("position"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    private UserToSpotTable(Name alias, Table<UserToSpotTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserToSpotTable(Name alias, Table<UserToSpotTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.user_to_spot_table</code> table reference
     */
    public UserToSpotTable(String alias) {
        this(DSL.name(alias), USER_TO_SPOT_TABLE);
    }

    /**
     * Create an aliased <code>public.user_to_spot_table</code> table reference
     */
    public UserToSpotTable(Name alias) {
        this(alias, USER_TO_SPOT_TABLE);
    }

    /**
     * Create a <code>public.user_to_spot_table</code> table reference
     */
    public UserToSpotTable() {
        this(DSL.name("user_to_spot_table"), null);
    }

    public <O extends Record> UserToSpotTable(Table<O> path, ForeignKey<O, UserToSpotTableRecord> childPath, InverseForeignKey<O, UserToSpotTableRecord> parentPath) {
        super(path, childPath, parentPath, USER_TO_SPOT_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class UserToSpotTablePath extends UserToSpotTable implements Path<UserToSpotTableRecord> {
        public <O extends Record> UserToSpotTablePath(Table<O> path, ForeignKey<O, UserToSpotTableRecord> childPath, InverseForeignKey<O, UserToSpotTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private UserToSpotTablePath(Name alias, Table<UserToSpotTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public UserToSpotTablePath as(String alias) {
            return new UserToSpotTablePath(DSL.name(alias), this);
        }

        @Override
        public UserToSpotTablePath as(Name alias) {
            return new UserToSpotTablePath(alias, this);
        }

        @Override
        public UserToSpotTablePath as(Table<?> alias) {
            return new UserToSpotTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserToSpotTableRecord> getPrimaryKey() {
        return Keys.USER_TO_SPOT_TABLE_PKEY;
    }

    @Override
    public List<ForeignKey<UserToSpotTableRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_TO_SPOT_TABLE__USER_TO_SPOT_TABLE_USER_ID_FKEY, Keys.USER_TO_SPOT_TABLE__USER_TO_SPOT_TABLE_SPOT_ID_FKEY);
    }

    private transient UserTablePath _userTable;

    /**
     * Get the implicit join path to the <code>public.user_table</code> table.
     */
    public UserTablePath userTable() {
        if (_userTable == null)
            _userTable = new UserTablePath(this, Keys.USER_TO_SPOT_TABLE__USER_TO_SPOT_TABLE_USER_ID_FKEY, null);

        return _userTable;
    }

    private transient SpotTablePath _spotTable;

    /**
     * Get the implicit join path to the <code>public.spot_table</code> table.
     */
    public SpotTablePath spotTable() {
        if (_spotTable == null)
            _spotTable = new SpotTablePath(this, Keys.USER_TO_SPOT_TABLE__USER_TO_SPOT_TABLE_SPOT_ID_FKEY, null);

        return _spotTable;
    }

    @Override
    public UserToSpotTable as(String alias) {
        return new UserToSpotTable(DSL.name(alias), this);
    }

    @Override
    public UserToSpotTable as(Name alias) {
        return new UserToSpotTable(alias, this);
    }

    @Override
    public UserToSpotTable as(Table<?> alias) {
        return new UserToSpotTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToSpotTable rename(String name) {
        return new UserToSpotTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToSpotTable rename(Name name) {
        return new UserToSpotTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToSpotTable rename(Table<?> name) {
        return new UserToSpotTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable where(Condition condition) {
        return new UserToSpotTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToSpotTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToSpotTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToSpotTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserToSpotTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserToSpotTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
