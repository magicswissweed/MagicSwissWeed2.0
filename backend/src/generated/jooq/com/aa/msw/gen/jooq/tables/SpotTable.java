/*
 * This file is generated by jOOQ.
 */
package com.aa.msw.gen.jooq.tables;


import com.aa.msw.gen.jooq.Keys;
import com.aa.msw.gen.jooq.Public;
import com.aa.msw.gen.jooq.enums.Spottype;
import com.aa.msw.gen.jooq.tables.UserToSpotTable.UserToSpotTablePath;
import com.aa.msw.gen.jooq.tables.records.SpotTableRecord;

import java.util.Collection;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class SpotTable extends TableImpl<SpotTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.spot_table</code>
     */
    public static final SpotTable SPOT_TABLE = new SpotTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpotTableRecord> getRecordType() {
        return SpotTableRecord.class;
    }

    /**
     * The column <code>public.spot_table.id</code>.
     */
    public final TableField<SpotTableRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.spot_table.type</code>.
     */
    public final TableField<SpotTableRecord, Spottype> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(Spottype.class), this, "");

    /**
     * The column <code>public.spot_table.stationid</code>.
     */
    public final TableField<SpotTableRecord, Integer> STATIONID = createField(DSL.name("stationid"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.spot_table.name</code>.
     */
    public final TableField<SpotTableRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.spot_table.minflow</code>.
     */
    public final TableField<SpotTableRecord, Integer> MINFLOW = createField(DSL.name("minflow"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.spot_table.maxflow</code>.
     */
    public final TableField<SpotTableRecord, Integer> MAXFLOW = createField(DSL.name("maxflow"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.spot_table.ispublic</code>.
     */
    public final TableField<SpotTableRecord, Boolean> ISPUBLIC = createField(DSL.name("ispublic"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private SpotTable(Name alias, Table<SpotTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private SpotTable(Name alias, Table<SpotTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.spot_table</code> table reference
     */
    public SpotTable(String alias) {
        this(DSL.name(alias), SPOT_TABLE);
    }

    /**
     * Create an aliased <code>public.spot_table</code> table reference
     */
    public SpotTable(Name alias) {
        this(alias, SPOT_TABLE);
    }

    /**
     * Create a <code>public.spot_table</code> table reference
     */
    public SpotTable() {
        this(DSL.name("spot_table"), null);
    }

    public <O extends Record> SpotTable(Table<O> path, ForeignKey<O, SpotTableRecord> childPath, InverseForeignKey<O, SpotTableRecord> parentPath) {
        super(path, childPath, parentPath, SPOT_TABLE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class SpotTablePath extends SpotTable implements Path<SpotTableRecord> {
        public <O extends Record> SpotTablePath(Table<O> path, ForeignKey<O, SpotTableRecord> childPath, InverseForeignKey<O, SpotTableRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private SpotTablePath(Name alias, Table<SpotTableRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public SpotTablePath as(String alias) {
            return new SpotTablePath(DSL.name(alias), this);
        }

        @Override
        public SpotTablePath as(Name alias) {
            return new SpotTablePath(alias, this);
        }

        @Override
        public SpotTablePath as(Table<?> alias) {
            return new SpotTablePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SpotTableRecord> getPrimaryKey() {
        return Keys.SPOT_TABLE_PKEY;
    }

    private transient UserToSpotTablePath _userToSpotTable;

    /**
     * Get the implicit to-many join path to the
     * <code>public.user_to_spot_table</code> table
     */
    public UserToSpotTablePath userToSpotTable() {
        if (_userToSpotTable == null)
            _userToSpotTable = new UserToSpotTablePath(this, null, Keys.USER_TO_SPOT_TABLE__USER_TO_SPOT_TABLE_SPOT_ID_FKEY.getInverseKey());

        return _userToSpotTable;
    }

    @Override
    public SpotTable as(String alias) {
        return new SpotTable(DSL.name(alias), this);
    }

    @Override
    public SpotTable as(Name alias) {
        return new SpotTable(alias, this);
    }

    @Override
    public SpotTable as(Table<?> alias) {
        return new SpotTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotTable rename(String name) {
        return new SpotTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotTable rename(Name name) {
        return new SpotTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public SpotTable rename(Table<?> name) {
        return new SpotTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable where(Condition condition) {
        return new SpotTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public SpotTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public SpotTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
